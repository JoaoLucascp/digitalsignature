/**
 * Simple Signature Pad Implementation
 * Compatible implementation for digital signatures
 */
(function(global) {
    'use strict';

    function SignaturePad(canvas, options) {
        this.canvas = canvas;
        this.ctx = canvas.getContext('2d');
        this.options = options || {};
        
        // Configuration
        this.backgroundColor = this.options.backgroundColor || 'rgb(255, 255, 255)';
        this.penColor = this.options.penColor || 'rgb(0, 0, 0)';
        this.minWidth = this.options.minWidth || 1;
        this.maxWidth = this.options.maxWidth || 3;
        
        // State
        this.isDrawing = false;
        this._isEmpty = true;
        this.points = [];
        
        // Callbacks
        this.onBegin = this.options.onBegin || function() {};
        this.onEnd = this.options.onEnd || function() {};
        
        this._setupEventListeners();
        this.clear();
    }

    SignaturePad.prototype._setupEventListeners = function() {
        var self = this;
        
        // Mouse events
        this.canvas.addEventListener('mousedown', function(e) {
            self._handleStart(e);
        });
        
        this.canvas.addEventListener('mousemove', function(e) {
            self._handleMove(e);
        });
        
        this.canvas.addEventListener('mouseup', function(e) {
            self._handleEnd(e);
        });
        
        // Touch events
        this.canvas.addEventListener('touchstart', function(e) {
            e.preventDefault();
            var touch = e.touches[0];
            var mouseEvent = new MouseEvent('mousedown', {
                clientX: touch.clientX,
                clientY: touch.clientY
            });
            self.canvas.dispatchEvent(mouseEvent);
        });
        
        this.canvas.addEventListener('touchmove', function(e) {
            e.preventDefault();
            var touch = e.touches[0];
            var mouseEvent = new MouseEvent('mousemove', {
                clientX: touch.clientX,
                clientY: touch.clientY
            });
            self.canvas.dispatchEvent(mouseEvent);
        });
        
        this.canvas.addEventListener('touchend', function(e) {
            e.preventDefault();
            var mouseEvent = new MouseEvent('mouseup', {});
            self.canvas.dispatchEvent(mouseEvent);
        });
        
        // Prevent scrolling when touching the canvas
        this.canvas.style.touchAction = 'none';
    };

    SignaturePad.prototype._handleStart = function(e) {
        this.isDrawing = true;
        this._isEmpty = false;
        this.points = [];
        
        var point = this._getPointFromEvent(e);
        this.points.push(point);
        
        this.onBegin();
        
        this.ctx.beginPath();
        this.ctx.moveTo(point.x, point.y);
    };

    SignaturePad.prototype._handleMove = function(e) {
        if (!this.isDrawing) return;
        
        var point = this._getPointFromEvent(e);
        this.points.push(point);
        
        this.ctx.lineTo(point.x, point.y);
        this.ctx.strokeStyle = this.penColor;
        this.ctx.lineWidth = this.minWidth;
        this.ctx.lineCap = 'round';
        this.ctx.lineJoin = 'round';
        this.ctx.stroke();
    };

    SignaturePad.prototype._handleEnd = function(e) {
        if (!this.isDrawing) return;
        
        this.isDrawing = false;
        this.onEnd();
    };

    SignaturePad.prototype._getPointFromEvent = function(e) {
        var rect = this.canvas.getBoundingClientRect();
        return {
            x: e.clientX - rect.left,
            y: e.clientY - rect.top
        };
    };

    SignaturePad.prototype.clear = function() {
        this.ctx.fillStyle = this.backgroundColor;
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        this._isEmpty = true;
        this.points = [];
    };

    SignaturePad.prototype.isEmpty = function() {
        return this._isEmpty;
    };

    SignaturePad.prototype.toDataURL = function(type, quality) {
        return this.canvas.toDataURL(type || 'image/png', quality);
    };

    // Export
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = SignaturePad;
    } else {
        global.SignaturePad = SignaturePad;
    }

})(typeof window !== 'undefined' ? window : this);